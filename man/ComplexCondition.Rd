% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ComplexCondition.R
\name{ComplexCondition}
\alias{ComplexCondition}
\title{R6 class representing a complex condition.}
\description{
A complex condition is made up of multiple elementary conditions by forming their conjunction.
}
\details{
A complex condition is the conjunction of elementary conditions.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{conditions}}{the set elementary conditions}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{ComplexCondition$new()}}
\item \href{#method-complexCover}{\code{ComplexCondition$complexCover()}}
\item \href{#method-firstMetric}{\code{ComplexCondition$firstMetric()}}
\item \href{#method-secondMetric}{\code{ComplexCondition$secondMetric()}}
\item \href{#method-allMetrics}{\code{ComplexCondition$allMetrics()}}
\item \href{#method-findBestElementary}{\code{ComplexCondition$findBestElementary()}}
\item \href{#method-reduceConditions}{\code{ComplexCondition$reduceConditions()}}
\item \href{#method-getConstants}{\code{ComplexCondition$getConstants()}}
\item \href{#method-getConstantsGrouped}{\code{ComplexCondition$getConstantsGrouped()}}
\item \href{#method-contains}{\code{ComplexCondition$contains()}}
\item \href{#method-append}{\code{ComplexCondition$append()}}
\item \href{#method-length}{\code{ComplexCondition$length()}}
\item \href{#method-print}{\code{ComplexCondition$print()}}
\item \href{#method-toString}{\code{ComplexCondition$toString()}}
\item \href{#method-equals}{\code{ComplexCondition$equals()}}
\item \href{#method-clone}{\code{ComplexCondition$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
Create a new ComplexCondition object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplexCondition$new(conditions)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{conditions}}{the set of elementary conditions}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-complexCover"></a>}}
\subsection{Method \code{complexCover()}}{
Method to calculate the set of objects matching this complex condition.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplexCondition$complexCover(it)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{it}}{the information table to use}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the set of matching objects - set of object names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-firstMetric"></a>}}
\subsection{Method \code{firstMetric()}}{
Method for calculating the first comparison metric used in the DOMLEM paper.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplexCondition$firstMetric(G, it)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{G}}{the parameter of the metric - a vector describing a set of objects}

\item{\code{it}}{the information table to use}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a numeric metric between 0 and 1. Higher is better.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-secondMetric"></a>}}
\subsection{Method \code{secondMetric()}}{
Method for calculating the second comparison metric used in the DOMLEM paper.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplexCondition$secondMetric(G, it)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{G}}{the parameter of the metric - a vector describing a set of objects}

\item{\code{it}}{the information table to use}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a non-negative integer metric. Higher is better.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-allMetrics"></a>}}
\subsection{Method \code{allMetrics()}}{
Method for calculating all comparison metrics used in the DOMLEM paper.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplexCondition$allMetrics(G, it)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{G}}{the parameter of the metrics - a vector describing a set of objects}

\item{\code{it}}{the information table to use}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a list of metrics. Higher is better.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-findBestElementary"></a>}}
\subsection{Method \code{findBestElementary()}}{
Method to evaluate if an elementary condition is better than the current best.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplexCondition$findBestElementary(G, it, check, best)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{G}}{the parameter of the metric - a vector describing a set of objects}

\item{\code{it}}{the information table to use}

\item{\code{check}}{the elementary condition to evaluate}

\item{\code{best}}{the current best elementary}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the better of the two elementary conditions
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-reduceConditions"></a>}}
\subsection{Method \code{reduceConditions()}}{
Method that tries to make a complex condition shorter.
For each elementary condition e in E, check if [E - {e}] subset or equal B then E := E - {e}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplexCondition$reduceConditions(B, it)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{B}}{the objects to cover - set of object names}

\item{\code{it}}{the information table to use}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a complex condition
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getConstants"></a>}}
\subsection{Method \code{getConstants()}}{
Method for creating an efficient representation of the constants used in the filter conditions.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplexCondition$getConstants(it)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{it}}{the information table to use}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a vector of filter values. Not filtered attributes have an NA value.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getConstantsGrouped"></a>}}
\subsection{Method \code{getConstantsGrouped()}}{
Method for creating an efficient representation of the constants used in the filter conditions, grouped by the type of variable and condition.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplexCondition$getConstantsGrouped(it)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{it}}{the information table to use}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a list of vector of filter values, one list for the following operator groups: (= or ~). (>=), and (<=). Not filtered attributes have an NA value.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-contains"></a>}}
\subsection{Method \code{contains()}}{
Method for deciding whether a provided elementary condition is part of this complex condition.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplexCondition$contains(elem)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{elem}}{the elementary condition to check}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a boolean value
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-append"></a>}}
\subsection{Method \code{append()}}{
Method for appending an additional elementary condition to the current conditions.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplexCondition$append(elem)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{elem}}{the elementary condition to be added}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-length"></a>}}
\subsection{Method \code{length()}}{
Method that returns the number of elementary conditions in this complex condition.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplexCondition$length()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\subsection{Method \code{print()}}{
print method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplexCondition$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-toString"></a>}}
\subsection{Method \code{toString()}}{
toString method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplexCondition$toString()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-equals"></a>}}
\subsection{Method \code{equals()}}{
Method to compare two ComplexConditions.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplexCondition$equals(other)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{other}}{the other complex condition to compare to}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a single boolean value
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ComplexCondition$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
